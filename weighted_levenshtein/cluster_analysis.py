import pandas as pd
from pathlib import Path
import math
import numpy as np
import matplotlib.pyplot as plt

def tcr_cluster_df(dist_type, tcr):
    cluster_file = '../data/dbscan_clusters_{}.txt'.format(dist_type)
    clusters = []
    with open(cluster_file, "r") as f:
        for line in f:
            clusters.append(int(line.strip()))

    df = pd.DataFrame({'CDR3': tcr,
                       'cluster': clusters})
    df = df.set_index('CDR3')
    return df


def format_df():
    file = "../data/CDR3_cluster_epitopes.csv"
    if Path(file).is_file():
        df = pd.read_csv(file, sep=';')
    else:
        tcr = []
        with open("../data/TRb_CD8_n42675_uppercase_CDR3_unique.csv", "r") as f:
            for line in f:
                tcr.append(line.strip())

        # join LD & WLD clusters data
        dfl = tcr_cluster_df('ld', tcr)
        dfw = tcr_cluster_df('wld', tcr)
        df_cluster = dfl.join(dfw, lsuffix='_ld', rsuffix='_wld')

        # Load epitope data
        df = pd.read_csv('../data/TRb_CD8_n42675_uppercase.csv', sep=";")
        df = df[['CDR3', 'Epitope_peptide']]
        # Epitopes -> columns
        one_hot = pd.get_dummies(df['Epitope_peptide'], prefix='', prefix_sep='')
        df = df.drop('Epitope_peptide', axis=1)
        df = df.join(one_hot)
        # CDR3 -> index
        df = df.set_index('CDR3')
        # keep unique CDR3
        df = df.groupby(df.index).sum()
        df[df != 0] = 1
        df['epi_sum'] = df.sum(axis=1)

        df = df_cluster.join(df)
        df = df.sort_values(by=['cluster_ld'])

        df.to_csv(file, sep=';')
    return df


def compute_homogeneity(df):
    # return score between 0 and 1
    # 1 = rows have identical elements
    n = df.shape[0]
    n_half = math.ceil(n / 2)
    sum_cols = df.sum()
    np.maximum(sum_cols, n - sum_cols)
    score = np.mean((np.maximum(sum_cols, n - sum_cols) - n_half) / (n - n_half))
    return score

# epi_sum
# remove -1
def cluster_homogeneity(dist_type, df):
    # remove outliers
    # df = df[df['cluster_{}'.format(dist_type)] != -1]
    cols = [col for col in df.columns if col not in ['CDR3', 'cluster_ld', 'cluster_wld', 'epi_sum']]
    score = []
    for i in set(df['cluster_{}'.format(dist_type)]):
        dfi = df[df['cluster_{}'.format(dist_type)] == i]
        score.append(compute_homogeneity(dfi[cols]))
    return score


df = format_df()
print("Outliers LD:", df[df['cluster_ld'] == -1].shape[0])
print("Outliers WLD:", df[df['cluster_wld'] == -1].shape[0])

score_ld = cluster_homogeneity('ld', df)
print(score_ld)
score_wld = cluster_homogeneity('wld', df)
print(score_wld)

# numpy_data = np.array([[1, 0, 1, 0],
#                        [1, 1, 1, 0],
#                        [1, 0, 1, 0],
#                        [1, 1, 0, 1],
#                        [0, 0, 0, 0]])
# b = pd.DataFrame(data=numpy_data, columns=['e1', 'e2', 'e3', 'e4'])
# n = b.shape[0]
# n_half = math.ceil(n/2)
# sum_cols = b.sum()
# np.maximum(sum_cols, n-sum_cols)
#
# score = np.mean((np.maximum(sum_cols, n - sum_cols) - n_half) / n_half)

# list1 = [0.958453523338888, 1.0, 0.9544444444444443, 0.9777777777777777, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9759259259259259, 0.9555555555555556, 0.9555555555555556, 0.9555555555555556, 0.9444444444444444, 1.0, 1.0, 0.9777777777777777, 0.9444444444444444, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9555555555555556, 0.9851851851851853, 1.0, 1.0, 0.95, 0.9333333333333333, 0.9666666666666667, 0.9777777777777777, 0.9777777777777777, 1.0, 1.0, 0.9222222222222223, 1.0, 1.0, 0.9666666666666667, 0.9666666666666667, 1.0, 0.9555555555555556, 0.9777777777777777, 1.0, 1.0, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9666666666666667, 0.9777777777777777, 1.0, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9666666666666667, 1.0, 0.9777777777777777, 1.0, 1.0, 0.9777777777777777, 1.0, 1.0, 0.9777777777777777, 0.9555555555555556, 0.9777777777777777, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9777777777777777, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9333333333333333, 1.0, 1.0, 0.9444444444444444, 1.0, 1.0, 1.0, 0.9777777777777777, 0.9777777777777777, 1.0, 0.9666666666666667, 1.0, 0.9555555555555556, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9666666666666667, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9666666666666667, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9444444444444444, 0.9777777777777777, 1.0, 0.8666666666666667, 0.9888888888888889, 0.9444444444444444, 0.9444444444444444, 0.9666666666666667, 0.9888888888888889, 0.9888888888888889, 0.9333333333333333, 0.9888888888888889, 0.9888888888888889, 0.9777777777777777, 0.9555555555555556, 0.9555555555555556, 1.0, 0.9444444444444444, 0.9333333333333333, 1.0, 0.9777777777777777, 1.0, 1.0, 0.9777777777777777, 1.0, 0.9555555555555556, 1.0, 1.0, 1.0, 0.9444444444444444, 0.9555555555555556, 1.0, 1.0, 0.9777777777777777, 1.0, 0.95, 0.9555555555555556, 0.9333333333333333, 0.9666666666666667, 1.0, 1.0, 0.9666666666666667, 0.9777777777777777, 0.9444444444444444, 1.0, 0.9555555555555556, 1.0, 0.9777777777777777, 0.9444444444444444, 1.0, 1.0, 0.9777777777777777, 1.0, 1.0, 1.0, 0.9444444444444444, 0.9777777777777777, 0.9555555555555556, 1.0, 0.9777777777777777, 0.9444444444444444, 0.9222222222222223, 0.9444444444444444, 0.9555555555555556, 0.9777777777777777, 0.9666666666666667, 0.9555555555555556, 0.9777777777777777, 1.0, 0.9333333333333333, 0.9444444444444444, 0.9444444444444444, 0.9444444444444444, 0.9777777777777777, 1.0, 1.0, 0.9666666666666667, 1.0, 0.9666666666666667, 0.9666666666666667, 0.9555555555555556, 0.9555555555555556, 0.9777777777777777, 0.9444444444444444, 0.9444444444444444, 0.9444444444444444, 1.0, 0.9444444444444444, 0.9777777777777777, 1.0, 0.9555555555555556, 0.9444444444444444, 0.9333333333333333, 0.9777777777777777, 0.9666666666666667, 0.9777777777777777, 0.9777777777777777, 0.9666666666666667, 0.9555555555555556, 0.9666666666666667, 0.9444444444444444, 0.9555555555555556, 0.9666666666666667, 0.9777777777777777, 0.9444444444444444, 0.9555555555555556, 0.9666666666666667, 0.9333333333333333, 0.9888888888888889, 0.9444444444444444, 0.8444444444444444, 0.9666666666666667, 0.9333333333333333, 0.9666666666666667, 0.9444444444444444, 0.9333333333333333, 0.9555555555555556, 0.9666666666666667, 0.9888888888888889, 0.9444444444444444, 0.9444444444444444, 0.9777777777777777, 0.9444444444444444, 0.9444444444444444, 0.9444444444444444, 0.9777777777777777, 0.9777777777777777, 1.0, 0.9777777777777777, 0.9888888888888889, 0.9777777777777777, 0.9888888888888889, 1.0, 0.9888888888888889, 0.9777777777777777, 0.9888888888888889, 0.9888888888888889, 0.9888888888888889, 0.9777777777777777, 0.9555555555555556, 0.9888888888888889, 0.9777777777777777, 1.0, 0.9888888888888889, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9888888888888889, 1.0, 0.9666666666666667, 0.9888888888888889, 1.0, 0.9666666666666667, 1.0, 0.9666666666666667, 0.9777777777777777, 0.9666666666666667, 0.9888888888888889, 0.9888888888888889, 1.0, 0.9888888888888889, 0.9666666666666667, 0.9888888888888889, 1.0, 1.0, 0.9777777777777777, 0.9888888888888889, 0.9666666666666667, 0.9888888888888889, 0.9888888888888889, 0.9777777777777777, 0.9666666666666667, 0.9888888888888889, 0.9666666666666667, 0.9888888888888889, 1.0, 1.0, 0.9666666666666667, 0.9777777777777777, 0.9888888888888889, 0.9944444444444445, 0.9777777777777777, 0.9666666666666667, 1.0, 0.9888888888888889, 0.9666666666666667, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9888888888888889, 1.0, 0.9888888888888889, 0.9777777777777777, 0.9666666666666667, 0.9777777777777777, 0.9888888888888889, 0.9666666666666667, 0.9777777777777777, 0.9444444444444444, 0.9666666666666667, 0.9888888888888889, 0.9888888888888889, 0.9722222222222222, 0.9777777777777777, 0.9666666666666667, 1.0, 0.9777777777777777, 0.9611111111111111, 0.9777777777777777, 0.9888888888888889, 0.9888888888888889, 0.9666666666666667, 0.9444444444444444, 0.9555555555555556, 0.9777777777777777, 0.9777777777777777, 0.9666666666666667, 0.9888888888888889, 0.9666666666666667, 0.9666666666666667, 0.9777777777777777, 0.9888888888888889, 0.9888888888888889, 0.9888888888888889, 0.9888888888888889, 0.9888888888888889, 0.9888888888888889, 0.9666666666666667, 0.9666666666666667, 0.9888888888888889, 0.9888888888888889, 1.0, 1.0, 0.9888888888888889, 0.9888888888888889, 0.9777777777777777, 0.9888888888888889, 0.9777777777777777, 1.0, 0.9666666666666667, 0.9555555555555556, 0.9666666666666667, 0.9666666666666667, 0.9888888888888889, 0.9777777777777777, 1.0, 1.0, 0.9666666666666667]
# list2 = [0.958587786259542, 0.9444444444444444, 1.0, 1.0, 0.9444444444444444, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9444444444444444, 1.0, 0.9777777777777777, 1.0, 1.0, 0.9777777777777777, 0.9666666666666667, 0.9777777777777777, 1.0, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9444444444444444, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9777777777777777, 0.9777777777777777, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9222222222222223, 0.9888888888888889, 0.9888888888888889, 0.9888888888888889, 0.9888888888888889, 0.9666666666666667, 0.9111111111111111, 1.0, 0.9555555555555556, 1.0, 1.0, 0.8666666666666667, 1.0, 1.0, 0.9666666666666667, 1.0, 0.9444444444444444, 0.9333333333333333, 0.9777777777777777, 1.0, 1.0, 0.9444444444444444, 1.0, 0.9333333333333333, 0.9444444444444444, 1.0, 0.9444444444444444, 1.0, 0.9666666666666667, 0.9666666666666667, 1.0, 0.9444444444444444, 0.9333333333333333, 0.9555555555555556, 0.9444444444444444, 1.0, 1.0, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9666666666666667, 0.9777777777777777, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.9777777777777777, 0.9444444444444444, 0.9666666666666667, 0.9555555555555556, 0.6444444444444445, 0.8666666666666667, 0.9666666666666667, 0.9222222222222223, 0.9444444444444444, 0.9333333333333333, 0.9444444444444444, 0.9666666666666667, 0.9444444444444444, 0.9555555555555556, 0.9555555555555556, 0.9444444444444444, 0.9888888888888889, 0.9666666666666667, 0.9888888888888889, 1.0, 0.9777777777777777, 0.9666666666666667, 0.9666666666666667, 0.9777777777777777, 1.0, 0.9444444444444444, 0.9888888888888889, 0.9777777777777777, 0.9666666666666667, 0.9777777777777777, 0.9666666666666667, 0.9666666666666667, 0.9777777777777777, 0.9666666666666667, 1.0, 0.9777777777777777, 0.9666666666666667, 0.9888888888888889, 1.0, 0.9777777777777777, 0.9777777777777777, 0.9888888888888889, 0.9888888888888889, 0.9555555555555556, 0.9777777777777777, 0.9888888888888889, 0.9666666666666667, 1.0, 0.9666666666666667, 0.9666666666666667, 0.9, 0.9777777777777777, 0.9777777777777777, 0.9777777777777777, 0.9888888888888889, 0.9666666666666667, 1.0, 0.9888888888888889, 1.0, 0.9888888888888889, 0.9777777777777777, 0.9888888888888889, 0.9888888888888889, 0.9888888888888889, 0.9444444444444444, 0.9888888888888889, 0.9777777777777777, 0.9888888888888889, 0.9666666666666667, 0.9888888888888889, 0.9888888888888889, 1.0, 0.9777777777777777, 1.0, 0.9666666666666667, 0.9888888888888889, 0.9888888888888889, 0.9777777777777777, 0.9666666666666667, 0.9555555555555556, 0.9555555555555556, 0.9666666666666667, 0.9888888888888889, 0.9666666666666667, 1.0]
#
# plt.hist(list1, alpha=0.5, bins=20, label="LD")
# plt.hist(list2*2, alpha=0.5, bins=50, label="WLD")
# plt.legend(loc='upper left')